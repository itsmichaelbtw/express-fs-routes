{"version":3,"file":"fs-routes.esm.js","sources":["../../lib/utils.ts","../../lib/directory-tree.ts","../../lib/debug.ts","../../lib/output.ts","../../lib/constants.ts","../../lib/parse-options.ts","../../lib/route-registration.ts"],"sourcesContent":["export function isUndefined(value: unknown): value is undefined {\r\n    return typeof value === \"undefined\";\r\n}\r\n\r\nexport function isNil(value: unknown): value is null | undefined {\r\n    return value === null || isUndefined(value);\r\n}\r\n\r\nexport function isArray<T>(value: unknown): value is T[] {\r\n    return Array.isArray(value);\r\n}\r\n\r\nexport function isObject(value: unknown): value is object {\r\n    return typeof value === \"object\" && value !== null && !isArray(value);\r\n}\r\n\r\nexport function isString(value: unknown): value is string {\r\n    return typeof value === \"string\";\r\n}\r\n\r\nexport function isFunction(value: unknown): value is Function {\r\n    return typeof value === \"function\";\r\n}\r\n\r\nexport function isEmpty(value: any): boolean {\r\n    if (isArray(value)) {\r\n        return value.length === 0;\r\n    } else if (isObject(value)) {\r\n        return Object.keys(value).length === 0;\r\n    } else {\r\n        return !value;\r\n    }\r\n}\r\n\r\nexport function forEach<T>(obj: T, fn: (key: keyof T, value: T[keyof T], obj: T) => void): void {\r\n    if (isUndefined(obj)) {\r\n        return;\r\n    }\r\n\r\n    if (isArray(obj)) {\r\n        obj.forEach(function (value, index) {\r\n            fn.call(null, index, value, obj);\r\n        });\r\n    } else {\r\n        for (const key in obj) {\r\n            fn.call(null, key, obj[key], obj);\r\n        }\r\n    }\r\n}\r\n\r\nexport function ensureLeadingToken(value: string, token: string): string {\r\n    if (!value.startsWith(token)) {\r\n        return `${token}${value}`;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function ensureTrailingToken(value: string, token: string): string {\r\n    if (!value.endsWith(token)) {\r\n        return `${value}${token}`;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function removeFileExtension(value: string): string {\r\n    return value.replace(/\\.[^/.]+$/, \"\");\r\n}\r\n\r\nexport function getCurrentWorkingEnvironment(): string {\r\n    return process.env.NODE_ENV || \"development\";\r\n}\r\n\r\nexport async function asyncReduce<T, U>(\r\n    array: T[],\r\n    callback: (accumulator: U, current: T) => Promise<U>,\r\n    initialValue: U\r\n): Promise<U> {\r\n    let accumulator = initialValue;\r\n\r\n    for (const current of array) {\r\n        accumulator = await callback(accumulator, current);\r\n    }\r\n\r\n    return accumulator;\r\n}\r\n","import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport type {\r\n    FilePath,\r\n    TreeComponentType,\r\n    DirectoryCallback,\r\n    DirectoryTree,\r\n    RouteRegistry\r\n} from \"./types\";\r\n\r\nimport { asyncReduce } from \"./utils\";\r\n\r\nconst FILE_FILTER = /^([^\\.].*)(?<!\\.d)\\.(js|ts)$/;\r\n\r\nfunction readDirectorySync(dirPath: FilePath) {\r\n    return fs.readdirSync(dirPath);\r\n}\r\n\r\nasync function stats(filePath: FilePath): Promise<fs.Stats> {\r\n    return new Promise((resolve, reject) => {\r\n        fs.stat(filePath, (err, stats) => {\r\n            if (err) {\r\n                reject(err);\r\n            } else {\r\n                resolve(stats);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction newComponentEntry(relativePath: FilePath, component: TreeComponentType): DirectoryTree {\r\n    const entry: DirectoryTree = {\r\n        name: path.basename(relativePath),\r\n        absolute_path: relativePath,\r\n        type: component\r\n    };\r\n\r\n    if (component === \"directory\") {\r\n        entry.children = [];\r\n    }\r\n\r\n    return entry;\r\n}\r\n\r\n/**\r\n * Creates a directory tree from a given directory path.\r\n *\r\n * @param dir The directory path.\r\n * @param onFile A callback function that is called for each file.\r\n * @returns A promise that resolves to a directory tree.\r\n */\r\nexport async function createDirectoryTree(\r\n    dir: FilePath,\r\n    onFile: DirectoryCallback\r\n): Promise<DirectoryTree> {\r\n    const directory = readDirectorySync(dir);\r\n\r\n    if (directory.length === 0) {\r\n        return newComponentEntry(dir, \"directory\");\r\n    }\r\n\r\n    const resolvedPath = dir;\r\n    const componentEntry = newComponentEntry(resolvedPath, \"directory\");\r\n\r\n    const directoryTree = await asyncReduce(\r\n        directory,\r\n        async (tree, file) => {\r\n            const filePath = path.join(resolvedPath, file);\r\n            const fileStats = await stats(filePath);\r\n\r\n            if (fileStats.isDirectory()) {\r\n                const child = await createDirectoryTree(filePath, onFile);\r\n\r\n                if (child) {\r\n                    tree.children.push(child);\r\n                }\r\n            } else if (fileStats.isFile()) {\r\n                const isFile = FILE_FILTER.test(file);\r\n\r\n                if (isFile) {\r\n                    const fileEntry = newComponentEntry(filePath, \"file\");\r\n\r\n                    await onFile(fileEntry);\r\n                    tree.children.push(fileEntry);\r\n                }\r\n            }\r\n\r\n            return tree;\r\n        },\r\n        componentEntry\r\n    );\r\n\r\n    return directoryTree;\r\n}\r\n","const colors = {\r\n    red: \"\\x1b[31m\",\r\n    yellow: \"\\x1b[33m\",\r\n    green: \"\\x1b[32m\",\r\n    lightblue: \"\\x1b[36m\"\r\n};\r\n\r\nconst globals = {\r\n    reset: \"\\x1b[0m\",\r\n    bright: \"\\x1b[1m\"\r\n};\r\n\r\nexport type DebugColors = keyof typeof colors;\r\n\r\nexport function debug(message: string, color: DebugColors) {\r\n    const prefix = \"[EXPRESS-FS-ROUTES] \";\r\n    const colorizedMessage = `${colors[color]}${prefix}${message}${globals.reset}`;\r\n\r\n    console.log(colorizedMessage);\r\n}\r\n","import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport type { RouteRegistry, DirectoryTree } from \"./types\";\r\n\r\nimport { debug } from \"./debug\";\r\nimport { isArray } from \"./utils\";\r\n\r\ninterface OutputOptions {\r\n    data: RouteRegistry | DirectoryTree;\r\n    fileName: string;\r\n}\r\ntype OutputCallback = () => [OutputOptions, OutputOptions];\r\n\r\nexport class Output {\r\n    /**\r\n     * Ensures the output directory exists and writes the files to it.\r\n     *\r\n     * @param directory The output directory.\r\n     * @param callback The callback to generate the files.\r\n     */\r\n    static ensureOutputDir(directory: string, callback: OutputCallback): void {\r\n        if (!fs.existsSync(directory)) {\r\n            fs.mkdirSync(directory);\r\n        }\r\n\r\n        const files = callback();\r\n\r\n        for (const file of files) {\r\n            try {\r\n                const filePath = path.resolve(path.join(directory, file.fileName));\r\n\r\n                fs.writeFileSync(filePath, JSON.stringify(file.data, null, 2), {\r\n                    encoding: \"utf8\",\r\n                    flag: \"w\"\r\n                });\r\n            } catch (error) {\r\n                debug(error, \"red\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Redact {\r\n    /**\r\n     * Redacts the absolute path from the route registry nodes.\r\n     *\r\n     * @param registry The route registry.\r\n     * @param redact Whether to redact the absolute path.\r\n     * @returns The redacted route registry.\r\n     */\r\n    static routeRegistry(registry: RouteRegistry, redact: boolean): RouteRegistry {\r\n        if (redact) {\r\n            return registry.map((entry) => {\r\n                return {\r\n                    ...entry,\r\n                    absolute_path: \"...\"\r\n                };\r\n            });\r\n        }\r\n\r\n        return registry;\r\n    }\r\n\r\n    /**\r\n     * Redacts the absolute path from the directory tree nodes.\r\n     *\r\n     * @param tree The directory tree.\r\n     * @param redact Whether to redact the absolute path.\r\n     * @returns The redacted directory tree.\r\n     */\r\n    static routeTree(tree: DirectoryTree, redact: boolean): DirectoryTree {\r\n        if (redact) {\r\n            const updatedNode = {\r\n                ...tree,\r\n                absolute_path: \"...\"\r\n            };\r\n\r\n            if (isArray(tree.children)) {\r\n                updatedNode.children = tree.children.map((child) => {\r\n                    return Redact.routeTree(child, redact);\r\n                });\r\n            }\r\n\r\n            return updatedNode;\r\n        }\r\n\r\n        return tree;\r\n    }\r\n}\r\n","import type { RouterOptions, RouteRegistrationOptions } from \"./types\";\r\n\r\nexport const SLUG_REGEX = /\\[(.*?)\\]/gi;\r\nexport const EXPRESS_PARAMS_TOKEN = \":\";\r\nexport const WILD_CARD_TOKEN = \"*\";\r\nexport const CURRENT_ENVIRONMENT = process.env.NODE_ENV || \"development\";\r\nexport const OUTPUT_DIRECTORY = \".fs-routes\";\r\n\r\nexport const DEFAULT_OPTIONS: RouteRegistrationOptions = {\r\n    directory: \"routes\",\r\n    appMount: \"\",\r\n    indexNames: [\"index.js\"],\r\n    output: OUTPUT_DIRECTORY,\r\n    silent: false,\r\n    environmentRoutes: undefined,\r\n    redactOutputFilePaths: false,\r\n    beforeRegistration: (route) => route\r\n};\r\n\r\nexport const DEFAULT_ROUTE_OPTIONS: RouterOptions = {\r\n    environments: null,\r\n    isIndex: null,\r\n    skip: false,\r\n    paramsRegex: {},\r\n    metadata: {}\r\n};\r\n","import type { RouteRegistrationOptions, RouterOptions } from \"./types\";\r\n\r\nimport { isObject, isArray, isFunction, isString, isEmpty } from \"./utils\";\r\nimport { DEFAULT_OPTIONS, DEFAULT_ROUTE_OPTIONS } from \"./constants\";\r\n\r\nexport function parseRouteRegistrationOptions(\r\n    options: RouteRegistrationOptions\r\n): RouteRegistrationOptions {\r\n    if (!isObject(options)) {\r\n        return DEFAULT_OPTIONS;\r\n    }\r\n\r\n    const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n\r\n    if (!isString(opts.directory)) {\r\n        opts.directory = DEFAULT_OPTIONS.directory;\r\n    }\r\n\r\n    if (!isString(opts.appMount) && opts.appMount !== null) {\r\n        opts.appMount = DEFAULT_OPTIONS.appMount;\r\n    }\r\n\r\n    if (!isObject(opts.environmentRoutes)) {\r\n        opts.environmentRoutes = {};\r\n    }\r\n\r\n    if (!isArray(opts.indexNames)) {\r\n        opts.indexNames = DEFAULT_OPTIONS.indexNames;\r\n    }\r\n\r\n    if (!isString(opts.output) && opts.output !== false && opts.output !== null) {\r\n        opts.output = DEFAULT_OPTIONS.output;\r\n    }\r\n\r\n    if (!isFunction(opts.beforeRegistration)) {\r\n        opts.beforeRegistration = DEFAULT_OPTIONS.beforeRegistration;\r\n    }\r\n\r\n    return opts;\r\n}\r\n\r\nexport function parseRouterHandlerOptions(options: RouterOptions): RouterOptions {\r\n    if (!isObject(options)) {\r\n        return DEFAULT_ROUTE_OPTIONS;\r\n    }\r\n\r\n    const opts = Object.assign({}, DEFAULT_ROUTE_OPTIONS, options);\r\n\r\n    if (opts.environments !== undefined) {\r\n        if (isString(opts.environments)) {\r\n            opts.environments = [opts.environments];\r\n        } else if (!isArray(opts.environments) || isEmpty(opts.environments)) {\r\n            opts.environments = DEFAULT_ROUTE_OPTIONS.environments;\r\n        }\r\n    }\r\n\r\n    if (!isEmpty(options.paramsRegex) && isObject(options.paramsRegex)) {\r\n        for (const pathName in options.paramsRegex) {\r\n            const pathRegex = options.paramsRegex[pathName];\r\n\r\n            if (isString(pathRegex)) {\r\n                continue;\r\n            }\r\n\r\n            if (pathRegex instanceof RegExp) {\r\n                options.paramsRegex[pathName] = pathRegex.source;\r\n            } else {\r\n                delete options.paramsRegex[pathName];\r\n            }\r\n        }\r\n    } else {\r\n        opts.paramsRegex = {};\r\n    }\r\n\r\n    if (!isObject(options.metadata)) {\r\n        opts.metadata = {};\r\n    }\r\n\r\n    return opts;\r\n}\r\n","import http from \"http\";\r\nimport path from \"path\";\r\nimport express from \"express\";\r\n\r\nimport type {\r\n    DirectoryTree,\r\n    FilePath,\r\n    RouteHandler,\r\n    RouterOptions,\r\n    RouteSchema,\r\n    RouteRegistry,\r\n    RouteRegistrationOptions,\r\n    ParamsRegex,\r\n    RouteHandlerMiddleware\r\n} from \"./types\";\r\nimport type { Request, Response, NextFunction } from \"express\";\r\n\r\nimport { createDirectoryTree } from \"./directory-tree\";\r\nimport { Redact, Output } from \"./output\";\r\nimport {\r\n    isEmpty,\r\n    isObject,\r\n    ensureLeadingToken,\r\n    removeFileExtension,\r\n    isArray,\r\n    isFunction,\r\n    isUndefined,\r\n    isString,\r\n    getCurrentWorkingEnvironment\r\n} from \"./utils\";\r\nimport {\r\n    DEFAULT_OPTIONS,\r\n    DEFAULT_ROUTE_OPTIONS,\r\n    EXPRESS_PARAMS_TOKEN,\r\n    WILD_CARD_TOKEN,\r\n    SLUG_REGEX,\r\n    OUTPUT_DIRECTORY\r\n} from \"./constants\";\r\nimport { parseRouteRegistrationOptions, parseRouterHandlerOptions } from \"./parse-options\";\r\nimport { debug, DebugColors } from \"./debug\";\r\n\r\ntype ExpressApp = express.Application;\r\ntype RouteRegistrationContext = \"commonjs\" | \"module\";\r\ntype RouteModifier<T, U> = (path: T, routeOptions: RouterOptions) => U;\r\n\r\nfunction getRouteOptions(handler: RouteHandler): RouterOptions {\r\n    // each individual handler exports a property called `routeOptions`\r\n    // which controls the route's behavior when it is registered.\r\n\r\n    // create a default route options and merge it with the handler's\r\n    // route options.\r\n\r\n    if (handler && handler.routeOptions && isObject(handler.routeOptions)) {\r\n        return parseRouterHandlerOptions(handler.routeOptions);\r\n    }\r\n\r\n    return DEFAULT_ROUTE_OPTIONS;\r\n}\r\n\r\nfunction debugOrThrowError(error: Error | string, color: DebugColors): void {\r\n    if (debugOrThrowError.silent) {\r\n        if (error instanceof Error) {\r\n            error = error.message;\r\n        }\r\n\r\n        return debug(error, color);\r\n    } else {\r\n        if (error instanceof Error) {\r\n            throw error;\r\n        }\r\n\r\n        throw new Error(error);\r\n    }\r\n}\r\n\r\ndebugOrThrowError.silent = DEFAULT_OPTIONS.silent;\r\n\r\nclass Engine {\r\n    private readonly $app: ExpressApp;\r\n    private readonly $context: RouteRegistrationContext;\r\n\r\n    protected $routeRegistry: RouteRegistry;\r\n    protected $options: RouteRegistrationOptions;\r\n    protected $resolveDirectory: string;\r\n\r\n    constructor(app: ExpressApp, context: RouteRegistrationContext) {\r\n        if (!app) {\r\n            throw new Error(\"No app was passed to the route engine.\");\r\n        }\r\n\r\n        if (context !== \"commonjs\" && context !== \"module\") {\r\n            throw new Error(\r\n                \"The engine expected a valid context. Must be either 'commonjs' or 'module'.\"\r\n            );\r\n        }\r\n\r\n        this.$app = app;\r\n        this.$context = context;\r\n        this.$routeRegistry = [];\r\n\r\n        this.setOptions(DEFAULT_OPTIONS);\r\n    }\r\n\r\n    /**\r\n     * The default output directory for the route registration.\r\n     */\r\n    static OUTPUT_DIRECTORY = OUTPUT_DIRECTORY;\r\n\r\n    /**\r\n     * Returns the options for the route registration.\r\n     */\r\n    public get options(): RouteRegistrationOptions {\r\n        return this.$options;\r\n    }\r\n\r\n    /**\r\n     * Returns the route registry.\r\n     */\r\n    public get registry(): RouteRegistry {\r\n        return this.$routeRegistry;\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute directory that is being used.\r\n     */\r\n    public get absoluteDirectory(): string {\r\n        return this.$resolveDirectory;\r\n    }\r\n\r\n    /**\r\n     * Sets the options for the route registration.\r\n     *\r\n     * @param options The options to set.\r\n     */\r\n    public setOptions(options: RouteRegistrationOptions): void {\r\n        this.$options = parseRouteRegistrationOptions(options);\r\n\r\n        if (path.isAbsolute(this.$options.directory)) {\r\n            this.$resolveDirectory = this.$options.directory;\r\n        } else {\r\n            this.$resolveDirectory = path.resolve(process.cwd(), this.$options.directory);\r\n        }\r\n\r\n        debugOrThrowError.silent = this.$options.silent;\r\n    }\r\n\r\n    /**\r\n     * Resolves the given file path to an absolute path\r\n     * relative to the directory that is being used.\r\n     *\r\n     * @param filePath The file path to resolve.\r\n     * @returns The resolved file path.\r\n     */\r\n    public resolveFilePath(filePath: FilePath): FilePath {\r\n        if (path.isAbsolute(filePath)) {\r\n            return filePath;\r\n        }\r\n\r\n        return path.resolve(this.$resolveDirectory, filePath);\r\n    }\r\n\r\n    /**\r\n     * An asynchronous function that is called for every file that the\r\n     * directory scan finds. This is responsible for requiring the file\r\n     * and transforming it into a route handler.\r\n     *\r\n     * @param fileEntry The file entry.\r\n     * @returns A promise that resolves to void.\r\n     */\r\n    protected async onFile(fileEntry: DirectoryTree): Promise<void> {\r\n        try {\r\n            const routeHandler = await this.requireHandler(fileEntry.absolute_path);\r\n\r\n            // If the route handler is null, it means that the file is empty\r\n            // or something went wrong when requiring the file. In this case,\r\n            // we skip the registration process but still append the route\r\n            // to the registry.\r\n            if (routeHandler === null) {\r\n                const schema = this.createRouteSchema(null, fileEntry, (schema) => {\r\n                    schema.status = \"skipped\";\r\n                    schema.error = \"Likely a function is not the default export.\";\r\n                    return schema;\r\n                });\r\n\r\n                this.appendToRegistry(schema);\r\n                return debugOrThrowError(\r\n                    `Route handler at ${fileEntry.absolute_path} is empty.`,\r\n                    \"red\"\r\n                );\r\n            }\r\n\r\n            const routeSchema = this.createRouteSchema(routeHandler, fileEntry);\r\n            this.bindRoutes(routeSchema, routeHandler);\r\n        } catch (error) {\r\n            const schema = this.createRouteSchema(null, fileEntry, (schema) => {\r\n                schema.status = \"error\";\r\n                schema.error = error.message;\r\n                return schema;\r\n            });\r\n\r\n            this.appendToRegistry(schema);\r\n            debugOrThrowError(error, \"red\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempts to load the route handler from the given path and uses\r\n     * the given context to determine how to load the file. If the file\r\n     * exports the `routeOptions` property, this will be parsed and\r\n     * attached to the route handler.\r\n     *\r\n     * @param path The path to the route handler.\r\n     * @returns The route handler or null if the file is empty.\r\n     */\r\n    protected async requireHandler(path: FilePath): Promise<RouteHandler | null> {\r\n        function handleNonFunction(): void {\r\n            debugOrThrowError(\r\n                `The default export of a route must be a function. Found at: ${path}`,\r\n                \"red\"\r\n            );\r\n        }\r\n\r\n        let handler: any | null = null;\r\n\r\n        try {\r\n            if (this.$context === \"module\") {\r\n                handler = await import(ensureLeadingToken(path, \"file://\"));\r\n\r\n                if (typeof handler.default !== \"function\") {\r\n                    handleNonFunction();\r\n                    return null;\r\n                }\r\n\r\n                const routeOptions = handler.routeOptions;\r\n\r\n                handler = handler.default;\r\n                handler.routeOptions = routeOptions;\r\n            } else if (this.$context === \"commonjs\") {\r\n                handler = require(path);\r\n            }\r\n        } catch (error) {\r\n            debugOrThrowError(error, \"red\");\r\n        }\r\n\r\n        // only for typescript compatibility\r\n        if (handler && handler.__esModule) {\r\n            if (typeof handler.default !== \"function\") {\r\n                handleNonFunction();\r\n                return null;\r\n            }\r\n\r\n            handler.default.routeOptions = handler.routeOptions;\r\n            handler = handler.default;\r\n        }\r\n\r\n        if (isEmpty(handler)) {\r\n            return null;\r\n        }\r\n\r\n        handler.routeOptions = getRouteOptions(handler);\r\n        return handler;\r\n    }\r\n\r\n    /**\r\n     * Converts the given route handler into a route schema and appends\r\n     * it to the route registry. All associated layers within\r\n     * the routes stack are also processed and appended to the registry.\r\n     *\r\n     * @param handler The route handler that was required.\r\n     * @param fileEntry The file entry from the directory scan.\r\n     * @param modifier A function that modifies the route schema.\r\n     * @returns An array of route schemas.\r\n     */\r\n    protected createRouteSchema(\r\n        handler: RouteHandler | null,\r\n        fileEntry: DirectoryTree,\r\n        modifier?: RouteModifier<RouteSchema, RouteSchema>\r\n    ): RouteRegistry {\r\n        const baseSchema: RouteSchema = {\r\n            method: null,\r\n            absolute_path: fileEntry.absolute_path,\r\n            route_options: {},\r\n            status: null,\r\n            base_path: null,\r\n            extended_path: null,\r\n            full_path: null\r\n        };\r\n\r\n        if (handler === null || isEmpty(handler.stack)) {\r\n            if (isFunction(modifier)) {\r\n                return [modifier(baseSchema, {})];\r\n            }\r\n\r\n            return [baseSchema];\r\n        }\r\n\r\n        const schemas: RouteRegistry = [];\r\n\r\n        for (const layer of handler.stack) {\r\n            const route = layer.route;\r\n            const extendedPath = route.path;\r\n            const method = route.stack[0].method;\r\n\r\n            const merged: RouteSchema = {\r\n                ...baseSchema,\r\n                method: method.toLowerCase(),\r\n                route_options: handler.routeOptions\r\n            };\r\n\r\n            const schemaURL = this.createRouteURL(\r\n                fileEntry.absolute_path,\r\n                merged.route_options,\r\n                (url) => {\r\n                    if (handler.routeOptions.isIndex) {\r\n                        const basename = path.basename(url);\r\n                        const base = ensureLeadingToken(basename, \"/\").replace(/\\/$/, \"\");\r\n\r\n                        if (base !== this.options.appMount) {\r\n                            url = url.replace(base, \"\");\r\n                        }\r\n                    }\r\n\r\n                    url = this.paramsRegexReplacement(url, merged.route_options.paramsRegex);\r\n\r\n                    merged.base_path = url;\r\n\r\n                    if (extendedPath && extendedPath !== \"/\") {\r\n                        url += extendedPath;\r\n                        merged.extended_path = extendedPath;\r\n                    }\r\n\r\n                    return ensureLeadingToken(url, \"/\");\r\n                }\r\n            );\r\n\r\n            merged.full_path = schemaURL;\r\n\r\n            if (isFunction(modifier)) {\r\n                const modified = modifier(merged, handler.routeOptions);\r\n                schemas.push(modified);\r\n            } else {\r\n                schemas.push(merged);\r\n            }\r\n        }\r\n\r\n        return schemas;\r\n    }\r\n\r\n    /**\r\n     * Creates a route URL that is used to register\r\n     * the route to the Express application.\r\n     *\r\n     * @param absolutePath The absolute path to the route handler.\r\n     * @param routeOptions Any route options that were defined.\r\n     * @param modifier A function that modifies the route URL.\r\n     * @returns The route URL.\r\n     */\r\n    protected createRouteURL(\r\n        absolutePath: string,\r\n        routeOptions: RouterOptions,\r\n        modifier: RouteModifier<string, string>\r\n    ): string {\r\n        let routePath = removeFileExtension(absolutePath);\r\n\r\n        if (routeOptions.isIndex == null) {\r\n            for (const indexName of this.options.indexNames) {\r\n                const resolved = removeFileExtension(indexName);\r\n                const basename = path.basename(routePath);\r\n\r\n                if (basename === resolved) {\r\n                    routePath = path.dirname(routePath);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (routePath.startsWith(this.$resolveDirectory)) {\r\n            routePath = routePath.replace(this.$resolveDirectory, \"\");\r\n        }\r\n\r\n        routePath = routePath.replace(/\\\\/g, \"/\");\r\n\r\n        if (!!this.options.appMount) {\r\n            const appMount = ensureLeadingToken(this.options.appMount, \"/\");\r\n            routePath = ensureLeadingToken(routePath, appMount);\r\n        }\r\n\r\n        if (routePath.endsWith(\"/\")) {\r\n            routePath = routePath.replace(/\\/$/, \"\");\r\n        }\r\n\r\n        const modified = modifier(routePath, routeOptions);\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Attempts to replace any slug parameters with\r\n     * the provided regex pattern. Otherwise, the\r\n     * default Express parameter token is used.\r\n     *\r\n     * @param url The URL to replace the slugs in.\r\n     * @param paramsRegex The regex pattern to use.\r\n     * @returns The modified URL.\r\n     */\r\n    protected paramsRegexReplacement(url: string, paramsRegex: ParamsRegex): string {\r\n        if (isUndefined(paramsRegex)) {\r\n            return url;\r\n        }\r\n\r\n        let modifiedUrl = url;\r\n        let match: RegExpMatchArray | null = null;\r\n\r\n        while ((match = SLUG_REGEX.exec(url)) !== null) {\r\n            const [slug, name] = match;\r\n\r\n            let regexReplacer = `${EXPRESS_PARAMS_TOKEN}${name}`;\r\n\r\n            if (paramsRegex[name]) {\r\n                regexReplacer += `(${paramsRegex[name]})`;\r\n            }\r\n\r\n            modifiedUrl = modifiedUrl.replace(slug, regexReplacer);\r\n        }\r\n\r\n        return modifiedUrl;\r\n    }\r\n\r\n    /**\r\n     * Performs environment based checking on the route schema\r\n     * and determines if the route should be registered in the\r\n     * current environment.\r\n     *\r\n     * @param routeSchema The route schema to check.\r\n     * @param callback The callback to invoke.\r\n     */\r\n    protected environmentBaseRegistration(\r\n        routeSchema: RouteSchema,\r\n        callback: (proceed: boolean) => void\r\n    ): void {\r\n        const routeOptions = routeSchema.route_options;\r\n\r\n        if (isUndefined(routeOptions)) {\r\n            return callback(true);\r\n        }\r\n\r\n        if (isArray(routeOptions.environments)) {\r\n            const proceed = routeOptions.environments.some((env) => {\r\n                return env === WILD_CARD_TOKEN || env === getCurrentWorkingEnvironment();\r\n            });\r\n\r\n            return callback(proceed);\r\n        }\r\n\r\n        if (\r\n            isUndefined(this.options.environmentRoutes) ||\r\n            isEmpty(this.options.environmentRoutes)\r\n        ) {\r\n            return callback(true);\r\n        }\r\n\r\n        let proceed = null;\r\n\r\n        for (const nodeEnv in this.options.environmentRoutes) {\r\n            const directories = this.options.environmentRoutes[nodeEnv];\r\n\r\n            if (isArray(directories)) {\r\n                for (const filePath of directories) {\r\n                    const resolved = this.resolveFilePath(filePath);\r\n\r\n                    if (routeSchema.absolute_path.startsWith(resolved)) {\r\n                        if (proceed === false || proceed === null) {\r\n                            proceed = nodeEnv === getCurrentWorkingEnvironment();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (proceed === null) {\r\n            callback(true);\r\n        } else {\r\n            callback(proceed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uses the given route handler middleware. Undergoes\r\n     * a registration hook to allow for any modifications to the\r\n     * route schema and handler.\r\n     *\r\n     * @param route The route schema.\r\n     * @param handler The route handler.\r\n     */\r\n    protected useRouteHandlerMiddleware(route: RouteSchema, handler: RouteHandler): void {\r\n        const useMiddleware: RouteHandlerMiddleware = (req, res, next) => {\r\n            req.routeMetadata = route.route_options.metadata ?? DEFAULT_ROUTE_OPTIONS.metadata;\r\n\r\n            return handler.call(this.$app, req, res, next);\r\n        };\r\n\r\n        this.$app.use.call(this.$app, route.full_path, useMiddleware);\r\n    }\r\n\r\n    /**\r\n     * Binds the available routes to the Express application\r\n     * and performs environment based checking.\r\n     *\r\n     * @param routes The routes to bind.\r\n     * @param handler The route handler to bind.\r\n     */\r\n    protected bindRoutes(routes: RouteRegistry, handler: RouteHandler): void {\r\n        for (let [index, route] of routes.entries()) {\r\n            const hookRoute = this.$options.beforeRegistration(route);\r\n\r\n            if (!isObject(hookRoute)) {\r\n                route.error = \"The `beforeRegistration` hook returned an invalid value.\";\r\n                route.status = \"error\";\r\n\r\n                debugOrThrowError(route.error, \"red\");\r\n\r\n                continue;\r\n            } else {\r\n                route = hookRoute;\r\n            }\r\n\r\n            const routeOptions = route.route_options;\r\n\r\n            if (routeOptions.skip) {\r\n                route.status = \"skipped\";\r\n                route.message = \"Route was skipped by the `routeOptions.skip` flag\";\r\n\r\n                continue;\r\n            }\r\n\r\n            this.environmentBaseRegistration(route, (proceed) => {\r\n                const environment = getCurrentWorkingEnvironment();\r\n\r\n                if (proceed) {\r\n                    this.useRouteHandlerMiddleware(route, handler);\r\n\r\n                    route.status = \"registered\";\r\n                    route.message = `Route was registered successfully for ${environment}`;\r\n                } else {\r\n                    route.status = \"skipped\";\r\n                    route.message = `Route was skipped for ${environment}`;\r\n                }\r\n\r\n                if (route) {\r\n                    routes[index] = route;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.appendToRegistry(routes);\r\n    }\r\n\r\n    /**\r\n     * Appends the given routes to the internal route registry.\r\n     *\r\n     * @param routes The routes to append.\r\n     */\r\n    protected appendToRegistry(routes: RouteRegistry): void {\r\n        for (const route of routes) {\r\n            this.$routeRegistry.push(route);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes a new instance of the RouteEngine class\r\n * that is used to register all available routes within\r\n * a given directory.\r\n *\r\n * @param app The express application instance.\r\n * @param context The context in which the routes are being registered.\r\n *\r\n * @example\r\n * ```typescript\r\n * import express from \"express\";\r\n *\r\n * import { RouteEngine } from \"express-fs-routes\";\r\n *\r\n * const app = express();\r\n * const fsRoutes = new RouteEngine(app, \"module\");\r\n *\r\n * fsRoutes.setOptions({ ... })\r\n *\r\n * await fsRoutes.registerRoutes();\r\n * ```\r\n */\r\nexport class RouteEngine extends Engine {\r\n    constructor(app: ExpressApp, context: RouteRegistrationContext) {\r\n        super(app, context);\r\n    }\r\n\r\n    /**\r\n     * Registers all available routes within a given directory.\r\n     */\r\n    public async registerRoutes(): Promise<RouteRegistry> {\r\n        try {\r\n            this.$routeRegistry = [];\r\n\r\n            const directory = this.$resolveDirectory;\r\n            const tree = await createDirectoryTree(directory, this.onFile.bind(this));\r\n\r\n            const output = this.options.output;\r\n            const registry = this.registry;\r\n\r\n            if (isString(output) && output.length) {\r\n                const redactFilePaths = this.options.redactOutputFilePaths;\r\n\r\n                Output.ensureOutputDir(output, () => {\r\n                    return [\r\n                        {\r\n                            data: Redact.routeRegistry(registry, redactFilePaths),\r\n                            fileName: \"route_registry.json\"\r\n                        },\r\n                        {\r\n                            data: Redact.routeTree(tree, redactFilePaths),\r\n                            fileName: \"route_tree.json\"\r\n                        }\r\n                    ];\r\n                });\r\n            }\r\n\r\n            return Promise.resolve(this.registry);\r\n        } catch (error) {\r\n            debugOrThrowError(error, \"red\");\r\n        }\r\n    }\r\n\r\n    // public async registerSingleRoute(): Promise<void> {}\r\n}\r\n"],"names":["isUndefined","value","isArray","Array","isObject","isString","isFunction","isEmpty","length","Object","keys","ensureLeadingToken","token","startsWith","removeFileExtension","replace","getCurrentWorkingEnvironment","process","env","NODE_ENV","asyncReduce","array","callback","initialValue","accumulator","current","FILE_FILTER","readDirectorySync","dirPath","fs","readdirSync","stats","filePath","Promise","resolve","reject","stat","err","newComponentEntry","relativePath","component","entry","name","path","basename","absolute_path","type","children","createDirectoryTree","dir","onFile","directory","resolvedPath","componentEntry","directoryTree","tree","file","join","fileStats","isDirectory","child","push","isFile","test","fileEntry","colors","red","yellow","green","lightblue","globals","reset","bright","debug","message","color","prefix","colorizedMessage","console","log","Output","ensureOutputDir","existsSync","mkdirSync","files","fileName","writeFileSync","JSON","stringify","data","encoding","flag","error","Redact","routeRegistry","registry","redact","map","routeTree","updatedNode","SLUG_REGEX","EXPRESS_PARAMS_TOKEN","WILD_CARD_TOKEN","OUTPUT_DIRECTORY","DEFAULT_OPTIONS","appMount","indexNames","output","silent","environmentRoutes","undefined","redactOutputFilePaths","beforeRegistration","route","DEFAULT_ROUTE_OPTIONS","environments","isIndex","skip","paramsRegex","metadata","parseRouteRegistrationOptions","options","opts","assign","parseRouterHandlerOptions","pathName","pathRegex","RegExp","source","getRouteOptions","handler","routeOptions","debugOrThrowError","Error","Engine","constructor","app","context","$app","$context","$routeRegistry","setOptions","$options","absoluteDirectory","$resolveDirectory","isAbsolute","cwd","resolveFilePath","routeHandler","requireHandler","schema","createRouteSchema","status","appendToRegistry","routeSchema","bindRoutes","handleNonFunction","default","require","__esModule","modifier","baseSchema","method","route_options","base_path","extended_path","full_path","stack","schemas","layer","extendedPath","merged","toLowerCase","schemaURL","createRouteURL","url","base","paramsRegexReplacement","modified","absolutePath","routePath","indexName","resolved","dirname","endsWith","modifiedUrl","match","exec","slug","regexReplacer","environmentBaseRegistration","proceed","some","nodeEnv","directories","useRouteHandlerMiddleware","useMiddleware","req","res","next","routeMetadata","call","use","routes","index","entries","hookRoute","environment","RouteEngine","registerRoutes","bind","redactFilePaths"],"mappings":"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"}