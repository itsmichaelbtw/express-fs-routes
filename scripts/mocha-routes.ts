import express from "express";
import url from "url";
import fs from "fs-extra";
import path from "path";

import type { RouterOptions } from "../lib";

interface GenerateRoutes {
    absolute: string;
    route_options: RouterOptions;
    template?: (append: string) => string;
}

function join(...name: string[]): string {
    return path.join(process.cwd(), "examples", "mocha", ...name);
}

function minify(code: string): string {
    return code.replace(/\s*\n\s*/g, "");
}

function enforceComment(code: string): string {
    return `/* Generated by: scripts/package-json.ts */\n\n${code}`;
}

class Templates {
    static default(append = ""): string {
        const minified = minify(`
            import express from "express";

            const router = express.Router({ mergeParams: true });

            router.get("/", (req, res) => {
                res.status(200).send(req.originalUrl);
            });

            export default router;

            ${append}
        `);

        return enforceComment(minified);
    }

    static params(append = ""): string {
        const minified = minify(`
            import express from "express";

            const router = express.Router({ mergeParams: true });

            router.get("/", (req, res) => {
                res.status(200).send(req.params);
            });

            export default router;

            ${append}
        `);

        return enforceComment(minified);
    }

    static error(): string {
        return "";
    }
}

const routes: GenerateRoutes[] = [
    {
        absolute: join("root.ts"),
        route_options: {}
    },
    {
        absolute: join("error.ts"),
        route_options: {},
        template: Templates.error
    },
    {
        absolute: join("engine_options", "environment_routes", "development", "index.ts"),
        route_options: {}
    },
    {
        absolute: join("engine_options", "environment_routes", "production", "index.ts"),
        route_options: {}
    },
    {
        absolute: join("engine_options", "environment_routes", "mixed", "index.ts"),
        route_options: {}
    },
    {
        absolute: join("engine_options", "index_names", "custom_index.ts"),
        route_options: {}
    },
    {
        absolute: join("engine_options", "index_names", "index.ts"),
        route_options: {}
    },
    {
        absolute: join("engine_options", "params", "[custom].ts"),
        route_options: {}
    },
    {
        absolute: join("engine_options", "params", "[nested]", "[token].ts"),
        route_options: {}
    },
    {
        absolute: join("handler_options", "environments", "development.ts"),
        route_options: {
            environments: ["development"]
        }
    },
    {
        absolute: join("handler_options", "environments", "production.ts"),
        route_options: {
            environments: ["production"]
        }
    },
    {
        absolute: join("handler_options", "environments", "mixed.ts"),
        route_options: {
            environments: ["development", "production", "test"]
        }
    },
    {
        absolute: join("handler_options", "environments", "wild_card.ts"),
        route_options: {
            environments: ["*"]
        }
    },
    {
        absolute: join("handler_options", "is_index", "path.ts"),
        route_options: {
            isIndex: true
        }
    },
    {
        absolute: join("handler_options", "is_index", "index.ts"),
        route_options: {
            isIndex: false
        }
    },
    {
        absolute: join("handler_options", "skip.ts"),
        route_options: {
            skip: true
        }
    },
    {
        absolute: join("handler_options", "params_regex", "[custom].ts"),
        route_options: {
            paramsRegex: {
                custom: "custom_[a-zA-Z0-9]+"
            }
        }
    },
    {
        absolute: join("handler_options", "params_regex", "[nested]", "[regex].ts"),
        route_options: {
            paramsRegex: {
                nested: "nested_[a-zA-Z0-9]+",
                regex: "regex_[a-zA-Z0-9]+"
            }
        }
    },
    {
        absolute: join("handler_options", "params_regex", "[missing]", "[regex].ts"),
        route_options: {
            paramsRegex: {
                regex: "regex_[a-zA-Z0-9]+"
            }
        }
    },
    {
        absolute: join("params", "[param_one]", "[param_two].ts"),
        route_options: {
            paramsRegex: {
                param_one: "param_one_[a-zA-Z0-9]+",
                param_two: "param_two_[a-zA-Z0-9]+"
            }
        },
        template: Templates.params
    }
];

function generateRoutes(): void {
    for (const route of routes) {
        const absolute = route.absolute;

        const appendCode = `export const routeOptions = ${JSON.stringify(
            route.route_options,
            null,
            4
        )};`;

        if (typeof route.template === "function") {
            fs.outputFileSync(absolute, route.template(appendCode));
        } else {
            fs.outputFileSync(absolute, Templates.default(appendCode));
        }
    }
}

generateRoutes();
